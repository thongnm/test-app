"""
Django settings for myapp project.

Generated by 'django-admin startproject' using Django 2.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import sys
import boto3 
import json
from botocore.exceptions import ClientError 
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'n=+9on!^=q=g=k75y9j0+6dmcmp52j*agd-3)m990_yb91tomm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

TEST = 'test' in sys.argv


DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

CORS_ORIGIN_ALLOW_ALL = True

MEDIA_URL = '/media/'
MEDIA_ROOT = './media/'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.6/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = 'www/static'

# Application definition

INSTALLED_APPS = [
    'app.apps.AppConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',
    'rest_framework',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myapp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myapp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
def get_secret():
  try:
    secret_name = os.environ.get('SECRET_NAME', 'secret_app_to_db'),
    endpoint_url = "https://secretsmanager.ap-southeast-2.amazonaws.com" 
    region_name = "ap-southeast-2" 

    session = boto3.session.Session() 
    client = session.client( 
        service_name='secretsmanager', 
        region_name=region_name, 
        endpoint_url=endpoint_url 
    ) 
    get_secret_value_response = client.get_secret_value(SecretId=secret_name) 
  except ClientError as e: 
    if e.response['Error']['Code'] == 'ResourceNotFoundException': 
      print("The requested secret " + secret_name + " was not found") 
    elif e.response['Error']['Code'] == 'InvalidRequestException': 
      print("The request was invalid due to:", e) 
    elif e.response['Error']['Code'] == 'InvalidParameterException': 
      print("The request had invalid params:", e) 
  except:
      print("Error - Enable to get secrets")
  else: 
    # Decrypted secret using the associated KMS CMK 
    # Depending on whether the secret was a string or binary, one of these fields will be populated 
    if 'SecretString' in get_secret_value_response: 
      secret = get_secret_value_response['SecretString'] 
      # convert secret tring to dict
      dict = json.loads(secret)
      return {
        'db_name': dict['NAME'],
        'db_user': dict['USER'],
        'db_password': dict['PASSWORD'],
        'db_host': dict['HOST'],
        'db_port': dict['PORT'],
      }
    else: 
      binary_secret_data = get_secret_value_response['SecretBinary'] 
      return binary_secret_data
    
  # Your code goes here. 

secrets = get_secret()
if (secrets == None): 
  secrets = {'db_name': 'myapp_test',
             'db_user': os.environ.get('POSTGRES_USER', 'postgres'),
             'db_password': os.environ.get('POSTGRES_PASSWORD', '123456'),
             'db_host': os.environ.get('POSTGRES_HOSTNAME', 'localhost'),
             'db_port': '5432',
             }
  
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': secrets['db_name'],
        'USER': secrets['db_user'],
        'PASSWORD': secrets['db_password'],
        'HOST': secrets['db_host'],
        'PORT': secrets['db_port'],
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
